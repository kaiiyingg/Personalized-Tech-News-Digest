# infra/ingestion.yaml
# Defines the serverless content ingestion pipeline:
# SQS queue, Lambda functions (Orchestrator and Processor),
# IAM roles, and a CloudWatch Event Rule for scheduling.
# Imports network and database outputs.

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for the TechPulse Content Ingestion Pipeline.

Parameters:
  # Import database outputs (Lambdas need to connect to RDS directly)
  DBEndpointAddress:
    Type: String
    Description: The endpoint address of the RDS DB instance from the Database stack.
    Default: "aws-0-ap-southeast-1.pooler.supabase.com"
  DBEndpointPort:
    Type: String
    Description: The port of the RDS DB instance from the Database stack.
    Default: "6543"
  DBName:
    Type: String
    Description: The name of the database from the Database stack.
    Default: "postgres"
  DBMasterUsername:
    Type: String
    Description: The master username for the database from the Database stack.
    Default: "postgres.ukkecrhvlkjkgfkdiare"
  DBMasterUserPassword:
    Type: String
    NoEcho: true
    Description: Master password for the database.
    Default: "Oreoicecream4950"

  # Lambda code location parameters
  LambdaCodeBucket:
    Type: String
    Description: S3 bucket name where Lambda deployment packages are stored.
    Default: "techpulse-lambda-code-kaiiyingg-20250721"
  OrchestratorCodeKey:
    Type: String
    Description: S3 key for the Ingestion Orchestrator Lambda deployment package.
    Default: "orchestrator.zip"
  ProcessorCodeKey:
    Type: String
    Description: S3 key for the Content Processor Lambda deployment package.
    Default: "processor.zip"

Resources:
  # SQS Queue for Content Processing
  ContentProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: techpulse-content-processing-queue
      VisibilityTimeout: '300' # 5 minutes (adjust based on expected processing time)
      Tags:
        - Key: Name
          Value: TechPulse-ContentProcessingQueue

  # IAM Role for Lambda Functions (shared by both Lambdas)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SQSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt ContentProcessingQueue.Arn
      Tags:
        - Key: Name
          Value: TechPulse-LambdaExecutionRole

  # Ingestion Orchestrator Lambda Function
  IngestionOrchestratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: techpulse-ingestion-orchestrator
      Handler: ingestion_orchestrator.handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref OrchestratorCodeKey
      Layers:
        - arn:aws:lambda:us-east-1:898466741470:layer:psycopg2-py39:1
      Environment:
        Variables:
          PG_HOST: !Ref DBEndpointAddress
          PG_PORT: !Ref DBEndpointPort
          PG_DATABASE: !Ref DBName
          PG_USER: !Ref DBMasterUsername
          PG_PASSWORD: !Ref DBMasterUserPassword
          SQS_QUEUE_URL: !Ref ContentProcessingQueue
      Tags:
        - Key: Name
          Value: TechPulse-IngestionOrchestrator

  # Content Processor Lambda Function
  ContentProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: techpulse-content-processor
      Handler: content_processor.handler
      Runtime: python3.9
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref ProcessorCodeKey
      Layers:
        - arn:aws:lambda:us-east-1:898466741470:layer:psycopg2-py39:1
      Environment:
        Variables:
          PG_HOST: !Ref DBEndpointAddress
          PG_PORT: !Ref DBEndpointPort
          PG_DATABASE: !Ref DBName
          PG_USER: !Ref DBMasterUsername
          PG_PASSWORD: !Ref DBMasterUserPassword
      Tags:
        - Key: Name
          Value: TechPulse-ContentProcessor

  # CloudWatch Event Rule to schedule the Orchestrator Lambda
  IngestionScheduler:
    Type: AWS::Events::Rule
    Properties:
      Name: TechPulse-IngestionScheduler
      Description: Schedules the ingestion orchestrator Lambda to run periodically.
      ScheduleExpression: rate(1 hour) # Runs every 1 hour. Adjust as needed (e.g., cron(0 0 * * ? *) for daily at midnight UTC)
      State: ENABLED
      Targets:
        - Arn: !GetAtt IngestionOrchestratorLambda.Arn
          Id: IngestionOrchestratorTarget

  # Permission for CloudWatch Event to invoke the Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IngestionOrchestratorLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt IngestionScheduler.Arn

Outputs:
  # Exported values for other CloudFormation stacks or direct use
  ContentProcessingQueueUrl:
    Description: URL of the SQS queue for content processing
    Value: !Ref ContentProcessingQueue
    Export:
      Name: !Sub "TechPulse-Ingestion-ContentProcessingQueueUrl"

  IngestionOrchestratorLambdaName:
    Description: Name of the Ingestion Orchestrator Lambda function
    Value: !Ref IngestionOrchestratorLambda
    Export:
      Name: !Sub "TechPulse-Ingestion-OrchestratorLambdaName"

  ContentProcessorLambdaName:
    Description: Name of the Content Processor Lambda function
    Value: !Ref ContentProcessorLambda
    Export:
      Name: !Sub "TechPulse-Ingestion-ContentProcessorLambdaName"