# infra/network.yaml

AWSTemplateFormatVersion: '2010-09-09'
Description: |
  CloudFormation template for the TechPulse Application Network. # Changed
  This creates a VPC with public and private subnets, an Internet Gateway,
  a NAT Gateway, and basic security groups.

Metadata:
  # Provides a nice UI in the CloudFormation console for parameter input
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VpcCidr
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
          - PrivateSubnet1Cidr
          - PrivateSubnet2Cidr
    ParameterLabels:
      VpcCidr:
        default: VPC CIDR Block (e.g., 10.0.0.0/16)
      PublicSubnet1Cidr:
        default: Public Subnet 1 CIDR (e.g., 10.0.0.0/24)
      PublicSubnet2Cidr:
        default: Public Subnet 2 CIDR (e.g., 10.0.1.0/24)
      PrivateSubnet1Cidr:
        default: Private Subnet 1 CIDR (e.g., 10.0.2.0/24) 
      PrivateSubnet2Cidr:
        default: Private Subnet 2 CIDR (e.g., 10.0.3.0/24)

Parameters:
  # General VPC CIDR
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.

  # Public Subnet CIDR blocks (for resources needing direct internet access, like NAT Gateway)
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR block for the first public subnet.
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the second public subnet.

  # Private Subnet CIDR blocks (for secure resources like RDS, Elastic Beanstalk instances)
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the first private subnet.
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for the second private subnet.

Resources:
  # 1. VPC (Virtual Private Cloud)
  # The isolated network space for your AWS resources.
  TechPulseVPC: # Renamed Logical ID
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: TechPulse-VPC 

  # 2. Internet Gateway and Attachment
  # Allows communication between your VPC and the internet.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TechPulse-IGW 
  
  # Attaches the Internet Gateway to your VPC.
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TechPulseVPC
      InternetGatewayId: !Ref InternetGateway
    DependsOn: InternetGateway # Ensure IGW exists before attaching

  # 3. Public Subnets (in different Availability Zones for High Availability)
  # Resources in public subnets can have direct internet access.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TechPulseVPC 
      CidrBlock: !Ref PublicSubnet1Cidr
      # Selects the first available Availability Zone in the region
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true # Automatically assigns a public IP to instances launched in this subnet
      Tags:
        - Key: Name
          Value: TechPulse-PublicSubnet-1 

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TechPulseVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      # Selects the second available Availability Zone in the region
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: TechPulse-PublicSubnet-2 

  # 4. Elastic IP (EIP) for NAT Gateway
  # A static public IP address required for the NAT Gateway.
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc # Specifies it's for a VPC

  # 5. NAT Gateway
  # Allows instances in private subnets to initiate outbound connections to the internet (e.g., for updates, fetching external resources).
  # This will incur charges!
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId # Associates the EIP with the NAT Gateway
      SubnetId: !Ref PublicSubnet1 # NAT Gateway must reside in a public subnet
      Tags:
        - Key: Name
          Value: TechPulse-NATGateway 
    DependsOn: NatGatewayEIP # Ensure EIP exists before creating NAT Gateway

  # 6. Private Subnets (in different Availability Zones)
  # Resources in private subnets have no direct inbound internet access, enhancing security.
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TechPulseVPC 
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: TechPulse-PrivateSubnet-1 

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TechPulseVPC 
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: TechPulse-PrivateSubnet-2 

  # 7. Route Tables
  # Define rules for network traffic routing.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TechPulseVPC 
      Tags:
        - Key: Name
          Value: TechPulse-PublicRT

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TechPulseVPC 
      Tags:
        - Key: Name
          Value: TechPulse-PrivateRT 

  # 8. Routes (Default routes for Internet access)
  # Directs all outbound traffic (0.0.0.0/0) from public subnets to the Internet Gateway.
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  # Directs all outbound traffic (0.0.0.0/0) from private subnets to the NAT Gateway.
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
    DependsOn: NatGateway

  # 9. Subnet Route Table Associations
  # Links subnets to their respective route tables.
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # 10. Security Groups
  # Act as virtual firewalls to control inbound and outbound traffic to instances.
  # Security Group for the Application (e.g., Elastic Beanstalk instances, Lambdas needing web access)
  # Allows HTTP/HTTPS/SSH inbound from anywhere (0.0.0.0/0).
  # IMPORTANT: In production, restrict SSH (Port 22) to your specific IP range for security!
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for TechPulse application instances
      VpcId: !Ref TechPulseVPC #
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # WARNING: Restrict this to your IP in production!
      Tags:
        - Key: Name
          Value: TechPulse-AppSG 

  # Security Group for the Database (e.g., RDS PostgreSQL)
  # Allows PostgreSQL port (5432) inbound ONLY from instances associated with the Application Security Group.
  # This ensures only your application can talk to the database.
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for TechPulse database instances 
      VpcId: !Ref TechPulseVPC 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: TechPulse-DbSG 

Outputs:
  # Exports are crucial for cross-stack references
  # VPC ID
  VPCId:
    Description: The ID of the VPC
    Value: !Ref TechPulseVPC 
    Export:
      Name: !Sub "TechPulse-Network-VPCId" 

  # Public Subnet IDs
  PublicSubnetIds:
    Description: A comma-delimited list of the public subnet IDs
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub "TechPulse-Network-PublicSubnetIds" 

  # Private Subnet IDs
  PrivateSubnetIds:
    Description: A comma-delimited list of the private subnet IDs
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub "TechPulse-Network-PrivateSubnetIds" 

  ApplicationSecurityGroupId:
    Description: Security Group ID for application instances
    Value: !GetAtt ApplicationSecurityGroup.GroupId
    Export:
      Name: !Sub "TechPulse-Network-ApplicationSecurityGroupId" 

  DatabaseSecurityGroupId:
    Description: Security Group ID for database instances
    Value: !GetAtt DatabaseSecurityGroup.GroupId
    Export:
      Name: !Sub "TechPulse-Network-DatabaseSecurityGroupId" 